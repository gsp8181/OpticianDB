// 
//  Copyright (c) 2011 Geoffrey Prytherch
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy of  this
//  software and associated documentation files (the "Software"), to deal in the Software
//  without restriction, including without limitation the rights to use, copy, modify, merge,
//  publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
//  to whom the Software is furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in all copies or
//  substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
//  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
//  FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
//  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//  DEALINGS IN THE SOFTWARE.
//  
using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using OpticianDB.Adaptor;

namespace OpticianDB
{
    /// <summary>
    ///   A class providing several methods for performing queries on the database without having to expose database logic to GUI components and other algorithms.
    /// </summary>
    public class DBBackEnd : IDisposable
    {
        /// <summary>
        ///   The connection string used for connecting to the database.
        /// </summary>
        private readonly string connectionString;

        /// <summary>
        ///   A backend class containing the LINQ to SQL associations generated by the IDE.
        /// </summary>
        private DBAdaptor adaptor;

        /// <summary>
        ///   A class containing the connection to the SQLite database.
        /// </summary>
        private SQLiteConnection connection;

        /// <summary>
        ///   Initializes a new instance of the <see cref = "DBBackEnd" /> class.
        ///   Connects to the database and creates one if it is not found.
        /// </summary>
        public DBBackEnd()
        {
            connectionString = "DbLinqProvider=Sqlite;Data Source=OpticianDB.db3";
            connection = new SQLiteConnection(connectionString);
            RefreshAdaptor();

            if (!File.Exists("OpticianDB.db3"))
            {
                CreateNewDB();
            }
        }

        /// <summary>
        ///   Gets a list of usernames in the database.
        /// </summary>
        /// <value>The user name list.</value>
        public IQueryable<string> UserNameList
        {
            get
            {
                return from user in adaptor.Users
                       select user.Username;
            }
        }

        /// <summary>
        ///   Returns a list of conditions from the database
        /// </summary>
        /// <value>The conditions list.</value>
        public IQueryable<string> ConditionsList
        {
            get
            {
                return from cnds in adaptor.Conditions
                       orderby cnds.Condition ascending
                       select cnds.Condition;
            }
        }

        /// <summary>
        ///   Gets a list of patients with their nhs number and names formatted into strings
        /// </summary>
        /// <value>A list of formatted strings with patient nhs numbers and names</value>
        public IQueryable<string> PatientListWithNhsNumber
        {
            get
            {
                IOrderedQueryable<Patients> q = from pnts in adaptor.Patients
                                                orderby pnts.Name , pnts.NhsnUmber ascending
                                                select pnts;
                List<string> resultsList = new List<string>();
                foreach (Patients patient in q)
                {
                    string resultString = patient.NhsnUmber + " - " + patient.Name;
                    resultsList.Add(resultString);
                }

                return resultsList.AsQueryable();
            }
        }

        /// <summary>
        ///   Gets the list of recalls for the current date
        /// </summary>
        /// <value>The list of recalls.</value>
        public IQueryable<PatientRecalls> TodaysRecalls
        {
            get
            {
                DateTime today = DateTime.Today;
                DateTime tomorrow = DateTime.Today.AddDays(1).AddMilliseconds(-1); // TODO: does this find dates after?
                return from q in adaptor.PatientRecalls
                       where q.DateAndPrefTime > today
                       where q.DateAndPrefTime.Value < tomorrow
                       select q;
            }
        }

        /// <summary>
        ///   Gets a complete list of recalls active in the database.
        /// </summary>
        /// <value>The recall list.</value>
        public IQueryable<PatientRecalls> RecallList
        {
            get
            {
                return from q in adaptor.PatientRecalls
                       orderby q.DateAndPrefTime
                       select q;
            }
        }

        /// <summary>
        ///   Gets the subjects of all the predefined emails in the database
        /// </summary>
        /// <value>The subject list.</value>
        public IQueryable<string> EmailList
        {
            get
            {
                return from q in adaptor.Emails
                       orderby q.Name
                       select q.Name;
            }
        }

        #region IDisposable Members

        /// <summary>
        ///   Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        #endregion

        /// <summary>
        ///   Creates a new database and adds a default user with username/password admin/admin
        /// </summary>
        public void CreateNewDB()
        {
            Stream resourceStream =
                Assembly.GetExecutingAssembly().GetManifestResourceStream("OpticianDB.Resources.blankdb.sql");
            StreamReader textStream = new StreamReader(resourceStream);
            string newDb = textStream.ReadToEnd();

            adaptor.ExecuteCommand(newDb, null);

            CreateNewUser("admin", "admin", "Default Administrator", HashMethods.Sha1);
            // TODO: messagebox to show addition of a new user?
        }

        /// <summary>
        ///   Gets a list of recalls in the database, optionally targetting criteria set by the user based on whether the parameters are null or not
        /// </summary>
        /// <param name = "startDate">The date to (optionally) search from.</param>
        /// <param name = "endDate">The date to (optionally) search to.</param>
        /// <returns>A list of patient records matching the specified criteria</returns>
        public IQueryable<PatientRecalls> GetRecalls(DateTime? startDate, DateTime? endDate)
        {
            if (!startDate.HasValue && endDate.HasValue)
            {
                endDate = endDate.Value.AddDays(1).AddMilliseconds(-1);
                return from q in adaptor.PatientRecalls
                       where q.DateAndPrefTime < endDate
                       orderby q.DateAndPrefTime
                       select q;
            }
            if (startDate.HasValue && !endDate.HasValue)
            {
                return from q in adaptor.PatientRecalls
                       where q.DateAndPrefTime > startDate
                       orderby q.DateAndPrefTime
                       select q;
            }
            if (startDate.HasValue && endDate.HasValue)
            {
                endDate = endDate.Value.AddDays(1).AddMilliseconds(-1);
                return from q in adaptor.PatientRecalls
                       where q.DateAndPrefTime < endDate
                       where q.DateAndPrefTime > startDate
                       orderby q.DateAndPrefTime
                       select q;
            }
            else
            {
                return RecallList;
            }
        }

        /// <summary>
        ///   Authenticates the given username and password against the database, hashing if necessary. If matches are found then the user is marked as authenticated.
        /// </summary>
        /// <param name = "userName">Name of the user being authenticated.</param>
        /// <param name = "password">The plaintext password.</param>
        /// <returns><c>true</c> if the user could be authenticated; otherwise, <c>false</c></returns>
        public bool LogOn(string userName, string password)
        {
            IQueryable<Users> q = from user in adaptor.Users
                                  where user.Username == userName
                                  select user;

            if (q.Count() == 0)
            {
                return false;
            }

            Users foundUser = q.First();

            string storedPwd = foundUser.Password;
            HashMethods hashMethod = (HashMethods) foundUser.PasswordHashMethod;
            string hashedPwd = Hashing.GetHash(password, hashMethod);

            return storedPwd == hashedPwd;
        }

        /// <summary>
        ///   Creates a new user in the database from the given input values
        /// </summary>
        /// <param name = "userName">The username.</param>
        /// <param name = "password">The password.</param>
        /// <param name = "fullName">The full name of the user.</param>
        /// <param name = "passwordHashMethod">The hash method used for encrypting the password in the database.</param>
        /// <returns><c>true</c> indicating if the addition succeeded. If the username already exists then <c>false</c>.</returns>
        public bool CreateNewUser(string userName, string password, string fullName, HashMethods passwordHashMethod)
        {
            if (UserExists(userName))
            {
                return false;
            }

            Users newuser = new Users
                                {
                                    Fullname = fullName,
                                    Password = Hashing.GetHash(password, HashMethods.Sha1),
                                    Username = userName,
                                    PasswordHashMethod = (int) passwordHashMethod
                                };

            adaptor.Users.InsertOnSubmit(newuser);
            adaptor.SubmitChanges();

            return true;
        }

        /// <summary>
        ///   Amends the selected user in the database with new given values.
        /// </summary>
        /// <param name = "editedUser">The current name of the user.</param>
        /// <param name = "newUserName">The desired new username. If no new username is desired then this is the same as editedUser.</param>
        /// <param name = "password">The new password of the user. If no new password is desired then this is null.</param>
        /// <param name = "fullName">The full name of the user to be added.</param>
        /// <returns>A value indicating if the addition succeeded. The only fail reason is if the username is being changed and the new username already exists.</returns>
        public bool AmendUser(string editedUser, string newUserName, string password, string fullName)
        {
            if (editedUser != newUserName && UserExists(newUserName))
            {
                return false;
            }

            Users userRec = (from uq in adaptor.Users
                             where uq.Username == editedUser
                             select uq).First();

            if (string.IsNullOrEmpty(password))
            {
                // HashMethods hashingMethod = hashMethod; // TODO: WHAAAAT??????
                HashMethods hashingMethod = (HashMethods) userRec.PasswordHashMethod;
                string pwHash = Hashing.GetHash(password, hashingMethod);
                if (pwHash != password)
                {
                    userRec.Password = pwHash;
                }
            }

            if (editedUser != newUserName)
            {
                userRec.Username = newUserName;
            }

            userRec.Fullname = fullName;

            adaptor.SubmitChanges();
            return true;
        }

        /// <summary>
        ///   Fetches the given users record from the database
        /// </summary>
        /// <param name = "userName">The username that a record lookup is performed on.</param>
        /// <returns>The users record</returns>
        public Users GetUserInfo(string userName)
        {
            return (from q in adaptor.Users
                    where q.Username == userName
                    select q).First();
        }

        /// <summary>
        ///   Fetches the primary key of the patient record from the given NHS number
        /// </summary>
        /// <param name = "nhsNumber">The NHS number that a record lookup is performed on.</param>
        /// <returns>The primary key of the patient record</returns>
        public int PatientIdByNhsNumber(string nhsNumber)
        {
            return (from pnts in adaptor.Patients
                    where pnts.NhsnUmber == nhsNumber
                    select pnts.PatientID).First();
        }

        /// <summary>
        ///   Searches for the given username in the database to check whether the user exists
        /// </summary>
        /// <param name = "userName">The username that an existance check is performed on.</param>
        /// <returns><c>true</c> indicating whether the user has been found or not; otherwise, <c>false</c></returns>
        public bool UserExists(string userName)
        {
            if (adaptor.Users.Count() != 0)
            {
                IQueryable<Users> existingUsers = from user in adaptor.Users
                                                  where user.Username == userName
                                                  select user;
                if (existingUsers.Count() != 0)
                {
                    return true;
                }
            }

            return false;
        }

        /// <summary>
        ///   Adds a patient to the database with the given information. Also performs a check to see whether a patient exists with the given NHS number and fails if one does.
        /// </summary>
        /// <param name = "name">The name of the patient to be added.</param>
        /// <param name = "address">The address of the patient.</param>
        /// <param name = "telNum">The telephone number of the patient.</param>
        /// <param name = "dateOfBirth">The date of birth of the patient.</param>
        /// <param name = "nhsNumber">The NHS number of the patient.</param>
        /// <param name = "email">The email of the patient.</param>
        /// <param name = "preferredrecallmethod">The patients preferred method to be recalled.</param>
        /// <returns>The record ID of the patient if the record is successfully added. Else returns -1 if a patient exists with the given NHS number.</returns>
        public int AddPatient(string name, string address, string telNum, DateTime dateOfBirth, string nhsNumber,
                              string email, RecallMethods preferredrecallmethod)
        {
            if (NhsNumberExists(nhsNumber))
            {
                return -1;
            }

            Patients pRec = new Patients
                                {
                                    Name = name,
                                    Address = address,
                                    TelNum = telNum,
                                    DateOfBirth = dateOfBirth,
                                    NhsnUmber = nhsNumber,
                                    Email = email,
                                    PreferredRecallMethod = (int) preferredrecallmethod
                                };

            adaptor.Patients.InsertOnSubmit(pRec);
            adaptor.SubmitChanges();

            return pRec.PatientID;
        }

        /// <summary>
        ///   Fetches the patient record from a given primary key
        /// </summary>
        /// <param name = "id">The patient ID that a record lookup is performed on.</param>
        /// <returns>The patient record.</returns>
        public Patients PatientRecord(int id)
        {
            return (from q in adaptor.Patients
                    where q.PatientID == id
                    select q).First();
        }

        /// <summary>
        ///   Adds a medical condition to the database with the given condition name.
        /// </summary>
        /// <param name = "conditionName">Name of the condition to be added to the database.</param>
        /// <returns>The record ID of the added condition or else -1 if the condition exists.</returns>
        public int AddCondition(string conditionName) // TODO: Description?
        {
            Conditions cnd = new Conditions();

            if (ConditionExists(conditionName))
            {
                return -1;
            }

            cnd.Condition = conditionName;
            adaptor.Conditions.InsertOnSubmit(cnd);
            adaptor.SubmitChanges();

            return cnd.ConditionID;
        }

        /// <summary>
        ///   Removes a condition from a patient from given information
        /// </summary>
        /// <param name = "conditionName">Name of the condition to be removed.</param>
        /// <param name = "patientId">The patient ID of the patient that the condition is removed from.</param>
        public void RemoveConditionByName(string conditionName, int patientId)
        {
            RefreshAdaptor();
            PatientConditions condition = (from q in adaptor.PatientConditions
                                           where q.Conditions.Condition == conditionName
                                           where q.PatientID == patientId
                                           select q).First();
            adaptor.PatientConditions.DeleteOnSubmit(condition);
            // patient.PatientConditions.Remove(condition);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Determines whether the given condition exists.
        /// </summary>
        /// <param name = "conditionName">Name of the condition that a record lookup is performed on.</param>
        /// <returns><c>true</c> if the condition exists; otherwise, <c>false</c></returns>
        public bool ConditionExists(string conditionName)
        {
            int conTable = (from q in adaptor.Conditions
                            where q.Condition == conditionName
                            select q).Count();
            return conTable != 0;
        }

        /// <summary>
        ///   Determines whether the specified patient can be posted by looking whether there is a value in the address field.
        /// </summary>
        /// <param name = "patientRec">The patient record that a record lookup is performed on.</param>
        /// <returns>
        ///   <c>true</c> if the patient has postal information listed; otherwise, <c>false</c>.
        /// </returns>
        public bool CanPatientBePosted(Patients patientRec)
        {
            return !string.IsNullOrEmpty(patientRec.Address);
        }

        /// <summary>
        ///   Determines whether the specified patient can be phoned by looking whether there is a value in the telephone field.
        /// </summary>
        /// <param name = "patientRec">The patient record that a record lookup is performed on.</param>
        /// <returns>
        ///   <c>true</c> if the patient has a telephone number listed; otherwise, <c>false</c>.
        /// </returns>
        public bool CanPatientBePhoned(Patients patientRec)
        {
            return !string.IsNullOrEmpty(patientRec.TelNum);
        }

        /// <summary>
        ///   Determines whether the specified patient can be emailed by looking whether there is a value in the email field.
        /// </summary>
        /// <param name = "patientRec">The patient record that a record lookup is performed on.</param>
        /// <returns>
        ///   <c>true</c> if the patient has an email listed; otherwise, <c>false</c>.
        /// </returns>
        public bool CanPatientBeEmailed(Patients patientRec) // TODO: remove
        {
            return !string.IsNullOrEmpty(patientRec.Email);
        }

        /// <summary>
        ///   Fetches the perferred recall method for a given patient.
        /// </summary>
        /// <param name = "patientId">The patient id that a record lookup is performed on.</param>
        /// <returns>The patients preferred recall method</returns>
        public RecallMethods PatientRecallMethod(int patientId) // TODO: is this needed?
        {
            return (RecallMethods) PatientRecord(patientId).PreferredRecallMethod;
        }

        /// <summary>
        ///   Fetches the perferred recall method for a given patient.
        /// </summary>
        /// <param name = "patient">The patient record that a record lookup is performed on.</param>
        /// <returns>The patients preferred recall method</returns>
        public RecallMethods PatientRecallMethod(Patients patient)
        {
            return (RecallMethods) patient.PreferredRecallMethod;
        }

        /// <summary>
        ///   Fetches the name of a specified condition
        /// </summary>
        /// <param name = "conditionId">The condition ID that a record lookup is performed on.</param>
        /// <returns>The name of the given condition</returns>
        public string GetConditionName(int conditionId)
        {
            return (from q in adaptor.Conditions
                    where q.ConditionID == conditionId
                    select q.Condition).First();
        }

        /// <summary>
        ///   Fetches the ID of a specified condition
        /// </summary>
        /// <param name = "conditionName">Name of the condition that a record lookup is performed on.</param>
        /// <returns>The condition ID of the given condition</returns>
        public int ConditionId(string conditionName)
        {
            return (from q in adaptor.Conditions
                    where q.Condition == conditionName
                    select q.ConditionID).First();
        }

        /// <summary>
        ///   Fetches a list of condition listed on the given patient record
        /// </summary>
        /// <param name = "patientId">The patient ID that a record lookup is performed on.</param>
        /// <returns>A list of patient condition records associated with the given patient.</returns>
        public IQueryable<PatientConditions> PatientConditionList(int patientId)
        {
            return from q in adaptor.PatientConditions
                   where q.PatientID == patientId
                   select q;
        }

        /// <summary>
        ///   Attaches a condition to a patient by forming a new PatientConditions record
        /// </summary>
        /// <param name = "patientId">The patient ID of the patient on which a condition is added to.</param>
        /// <param name = "conditionId">The condition ID of the condition to be added.</param>
        public void AttachCondition(int patientId, int conditionId)
        {
            PatientConditions pCond = new PatientConditions {PatientID = patientId, ConditionID = conditionId};
            adaptor.PatientConditions.InsertOnSubmit(pCond);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Amends the given patient record replacing the contents of a record with the given values.
        /// </summary>
        /// <param name = "patientId">The patient id of the record to be amended.</param>
        /// <param name = "name">The name of the patient.</param>
        /// <param name = "address">The address of the patient.</param>
        /// <param name = "telNum">The tel num of the patient.</param>
        /// <param name = "dateOfBirth">The date of birth of the patient.</param>
        /// <param name = "nhsNumber">The NHS number of the patient.</param>
        /// <param name = "email">The email of the patient.</param>
        /// <param name = "preferredrecallmethod">The patients preferred method of being recalled.</param>
        /// <returns><c>true</c> if the record was added successfully or <c>false</c> if a patient already exists with the given NHS number and it is not the current patient.</returns>
        public bool AmendPatient(int patientId, string name, string address, string telNum, DateTime dateOfBirth,
                                 string nhsNumber, string email, RecallMethods preferredrecallmethod)
        {
            Patients pRecord = PatientRecord(patientId);
            pRecord.Name = name;
            pRecord.Address = address;
            pRecord.TelNum = telNum;
            pRecord.DateOfBirth = dateOfBirth;
            if (pRecord.NhsnUmber != nhsNumber && NhsNumberExists(nhsNumber))
            {
                return false;
            }

            pRecord.NhsnUmber = nhsNumber;
            pRecord.Email = email;
            pRecord.PreferredRecallMethod = (int) preferredrecallmethod;

            adaptor.SubmitChanges();
            return true;
        }

        /// <summary>
        ///   Detirmines whether a patient with the given NHS Number exists.
        /// </summary>
        /// <param name = "nhsNumber">The NHS number.</param>
        /// <returns><c>true</c> if a patient was found; Otherwise, <c>false</c></returns>
        public bool NhsNumberExists(string nhsNumber)
        {
            int q = (from qr in adaptor.Patients
                     where qr.NhsnUmber == nhsNumber
                     select qr).Count();
            return q == 1;
        }

        /// <summary>
        ///   Refreshes the records on the LINQ adaptor by disposing of all records.
        /// </summary>
        public void RefreshAdaptor()
        {
            if (adaptor != null)
            {
                adaptor.Dispose();
            }

            adaptor = new DBAdaptor(connection);
#if !TEST
#if DEBUG
            Console.Log = Console.Out;
#endif
#endif
        }

        /// <summary>
        ///   Determines whether a given patient has an outstanding recall record.
        /// </summary>
        /// <param name = "patientId">The patient id that a record lookup is performed on.</param>
        /// <returns><c>true</c> if the patient has an associated recall record; Otherwise, <c>false</c></returns>
        public bool OutstandingRecall(int patientId)
        {
            int rclq = (from q in adaptor.PatientRecalls
                        where q.PatientID == patientId
                        select q).Count();
            return rclq != 0;
        }

        /// <summary>
        ///   Fetches the recall record associated with a given patient.
        /// </summary>
        /// <param name = "patientId">The patient id that a record lookup is performed on.</param>
        /// <returns>The recall record associated with the given patient.</returns>
        public PatientRecalls GetRecall(int patientId)
        {
            return (from q in adaptor.PatientRecalls
                    where q.PatientID == patientId
                    select q).First();
        }

        /// <summary>
        ///   Fetches a recall record from the database with a given recall id.
        /// </summary>
        /// <param name = "recallId">The recall id that a record lookup is performed on.</param>
        /// <returns>The recall record associated with a given primary key.</returns>
        public PatientRecalls GetRecallByRclId(int recallId)
        {
            return (from q in adaptor.PatientRecalls
                    where q.RecallID == recallId
                    select q).First();
        }

        /// <summary>
        ///   Deletes a patient from the database, removing all records associated with the given patient.
        /// </summary>
        /// <param name = "patientId">The patient id to be removed.</param>
        public void DeletePatient(int patientId)
        {
            Patients pRec = PatientRecord(patientId);
            adaptor.PatientRecalls.DeleteAllOnSubmit(pRec.PatientRecalls);
            adaptor.PatientConditions.DeleteAllOnSubmit(pRec.PatientConditions);
            adaptor.PatientAppointments.DeleteAllOnSubmit(pRec.PatientAppointments);
            adaptor.PatientTestResults.DeleteAllOnSubmit(pRec.PatientTestResults);
            adaptor.Patients.DeleteOnSubmit(pRec);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Deletes a recall record from the database. This usually happens after the recall has been performed.
        /// </summary>
        /// <param name = "patientId">The patient id of the patient which the recall record is associated with.</param>
        public void DeleteRecall(int patientId)
        {
            adaptor.PatientRecalls.DeleteOnSubmit(GetRecall(patientId));
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Saves a recall to the database from the given information
        /// </summary>
        /// <param name = "patientId">The patient id to be recalled.</param>
        /// <param name = "dateAndPrefTime">The date and preferred time of the recall.</param>
        /// <param name = "reason">The reason for the recall.</param>
        /// <param name = "method">The method of the recall.</param>
        public void SaveRecall(int patientId, DateTime dateAndPrefTime, string reason, RecallMethods method)
        {
            if (OutstandingRecall(patientId))
            {
                DeleteRecall(patientId);
            }

            PatientRecalls pr1 = new PatientRecalls
                                     {
                                         PatientID = patientId,
                                         DateAndPrefTime = dateAndPrefTime,
                                         Reason = reason,
                                         Method = (int) method
                                     };
            adaptor.PatientRecalls.InsertOnSubmit(pr1);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Amends the given recall record with the given information.
        /// </summary>
        /// <param name = "patientId">The patient id associated with the amended recall record.</param>
        /// <param name = "dateAndPrefTime">The date and preferred time of the new recall.</param>
        /// <param name = "reason">The new reason for the recall.</param>
        /// <param name = "method">The new method of the recall.</param>
        public void AmendRecall(int patientId, DateTime dateAndPrefTime, string reason, RecallMethods method)
        {
            PatientRecalls pr1 = GetRecall(patientId);
            pr1.DateAndPrefTime = dateAndPrefTime;
            pr1.Reason = reason;
            pr1.Method = (int) method;
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Shifts the recall forward to tomorrow keeping the same time. Used in the case of a phone recall not being able to take place
        /// </summary>
        /// <param name = "patientId">The patient id of the patient with the associated recall that needs shifting forward.</param>
        public void ShiftRecall(int patientId)
        {
            PatientRecalls pr1 = GetRecall(patientId);
            DateTime date = pr1.DateAndPrefTime.Value;
            pr1.DateAndPrefTime = DateTime.Today.Date.AddDays(1);
            pr1.DateAndPrefTime.Value.AddHours(date.Hour);
            pr1.DateAndPrefTime.Value.AddMinutes(date.Minute);
            pr1.DateAndPrefTime.Value.AddSeconds(date.Second);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Detirmines whether the specified email template exists in the database
        /// </summary>
        /// <param name = "emailName">Name of the email that a record lookup is performed on.</param>
        /// <returns><c>true</c> if the specified email record exists; Otherwise, <c>false</c></returns>
        public bool DoesEmailExist(string emailName)
        {
            int elist = (from q in adaptor.Emails
                         where q.Name == emailName
                         select q).Count();
            return elist != 0;
        }

        /// <summary>
        ///   Saves the email template to the database from given values.
        /// </summary>
        /// <param name = "name">The name of the email to be added</param>
        /// <param name = "emailtext">The message body of the email.</param>
        /// <returns><c>true</c> if the save succeeded. If an email with the given name already exists then <c>false</c></returns>
        public bool SaveEmailRecord(string name, string emailtext)
        {
            int elist = (from q in adaptor.Emails
                         where q.Name == name
                         select q).Count();
            if (elist != 0)
            {
                return false;
            }

            Emails emailrec = new Emails {Name = name, Value = emailtext};
            adaptor.Emails.InsertOnSubmit(emailrec);
            adaptor.SubmitChanges();
            return true;
        }

        /// <summary>
        ///   Amends an email template record with the given information.
        /// </summary>
        /// <param name = "recordId">The record id of the record to be amended.</param>
        /// <param name = "name">The new name of the email.</param>
        /// <param name = "emailtext">The new body of the email.</param>
        /// <returns><c>true</c> if the email was successfully added. <c>false</c> if a record already exists (that is not the current record) with the given name</returns>
        public bool AmendEmailRecord(int recordId, string name, string emailtext)
        {
            IQueryable<Emails> elist = from q in adaptor.Emails
                                       // TODO: goto does email exist
                                       where q.Name == name
                                       where q.EmailID != recordId
                                       select q;
            if (elist.Count() != 0)
            {
                return false;
            }

            Emails email = (from q in adaptor.Emails
                            // TODO: goto does email exist
                            where q.EmailID == recordId
                            select q).First();
            email.Name = name;
            email.Value = emailtext;
            adaptor.SubmitChanges();
            return true;
        }

        /// <summary>
        ///   Fetches the specified email template record
        /// </summary>
        /// <param name = "emailName">Name of the email that a record lookup is performed on.</param>
        /// <returns>The email template record</returns>
        public Emails GetEmailRecord(string emailName)
        {
            return (from q in adaptor.Emails
                    where q.Name == emailName
                    select q).First();
        }

        /// <summary>
        ///   Deletes a given email template record.
        /// </summary>
        /// <param name = "recordId">The record id of the record to be deleted.</param>
        public void DeleteEmailRecord(int recordId)
        {
            Emails elist = (from q in adaptor.Emails
                            where q.EmailID == recordId
                            select q).First();
            adaptor.Emails.DeleteOnSubmit(elist);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Fetches the full name of a given user.
        /// </summary>
        /// <param name = "userName">Name of the user that a record lookup is performed on.</param>
        /// <returns>The users full name</returns>
        public string GetUsersFullName(string userName)
        {
            return GetUserInfo(userName).Fullname;
        }

        /// <summary>
        ///   Saves an appointment to the database with given information
        /// </summary>
        /// <param name = "startDate">The start date and time of the appointment</param>
        /// <param name = "endDate">The end date and time of the appointment.</param>
        /// <param name = "userName">Username of the optician that the record is attached to.</param>
        /// <param name = "patientId">The patient id that the record is attached to</param>
        /// <param name = "remarks">Remarks of the appointment.</param>
        public void SaveAppointment(DateTime startDate, DateTime endDate, string userName, int patientId, string remarks)
            // TODO: FAIL IF INTERSECTS ANOTHER APPOINTMENT
        {
            PatientAppointments pa1 = new PatientAppointments();
            pa1.UserID = GetUserInfo(userName).UserID;
            pa1.PatientID = PatientRecord(patientId).PatientID;
            pa1.Remarks = remarks;
            pa1.StartDateTime = startDate;
            pa1.EndDateTime = endDate;
            adaptor.PatientAppointments.InsertOnSubmit(pa1);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Returns a list of appointments for a specified user on a given date
        /// </summary>
        /// <param name = "username">The username that a record lookup is performed on.</param>
        /// <param name = "date">The date of the appointments that are looked up.</param>
        /// <returns>A list of appointments found.</returns>
        public IQueryable<PatientAppointments> GetAppointmentsByDateAndUser(string username, DateTime date)
        {
            date = date.Date;
            DateTime enddate = date.AddDays(1).AddMilliseconds(-1);
            return from q in adaptor.PatientAppointments
                   where q.StartDateTime > date
                   where q.StartDateTime < enddate
                   where q.Users.Username == username
                   select q;
        }

        /// <summary>
        ///   Fetches the first appointment from the database associated with a given patient and start time.
        /// </summary>
        /// <param name = "patientName">Name of the patient that a record lookup is performed on.</param>
        /// <param name = "startDateTime">The start date and time of the appointment.</param>
        /// <returns>The first appointment associated with the given criteria</returns>
        public PatientAppointments GetAppointmentByDtAndPatient(string patientName, DateTime startDateTime)
        {
            return (from q in adaptor.PatientAppointments
                    where q.StartDateTime == startDateTime
                    where q.Patients.Name == patientName
                    select q).First();
        }

        /// <summary>
        ///   Fetches an appointment record with the associated appointment ID.
        /// </summary>
        /// <param name = "appointmentId">The appointment id that a record lookup is performed on.</param>
        /// <returns>The returned appointment record</returns>
        public PatientAppointments GetAppointmentById(int appointmentId)
        {
            return (from q in adaptor.PatientAppointments
                    where q.AppointmentID == appointmentId
                    select q).First();
        }

        /// <summary>
        ///   Stores the test results into the database and removes the used appointment record.
        /// </summary>
        /// <param name = "appointmentId">The appointment id of the opened appointment record.</param>
        /// <param name = "rSph">The spherical diops of the right eye.</param>
        /// <param name = "lSph">The spherical diops of the left eye.</param>
        /// <param name = "rVa1">The first column of the visual acuity for the right eye.</param>
        /// <param name = "rVa2">The first column of the visual acuity for the right eye.</param>
        /// <param name = "lVa1">The second column of the visual acuity for the left eye.</param>
        /// <param name = "lVa2">The second column of the visual acuity for the left eye</param>
        /// <param name = "rCyl">The cylindrical diops of the right eye.</param>
        /// <param name = "rAxis">The cylindrical axis (in degrees) of the right eye.</param>
        /// <param name = "lCyl">The cylindrical diops of the left eye.</param>
        /// <param name = "lAxis">The cylindrical axis (in degrees) of the left eye.</param>
        /// <param name = "remarks">Any remarks of the appointment.</param>
        public void StoreTestResults(int appointmentId, string rSph, string lSph, string rVa1, string rVa2, string lVa1,
                                     string lVa2, string rCyl, string rAxis, string lCyl, string lAxis, string remarks)
        {
            PatientAppointments ap1 = GetAppointmentById(appointmentId);
            PatientTestResults pt1 = new PatientTestResults
                                         {
                                             Date = DateTime.Now.Date,
                                             PatientID = ap1.PatientID,
                                             UserID = ap1.UserID,
                                             RSpH = rSph,
                                             LSpH = lSph,
                                             RvA1 = rVa1,
                                             RvA2 = rVa2,
                                             LVA1 = lVa1,
                                             LVA2 = lVa2,
                                             RcYL = rCyl,
                                             RAxis = rAxis,
                                             LcYL = lCyl,
                                             LaxIs = lAxis,
                                             Remarks = remarks
                                         };
            adaptor.PatientTestResults.InsertOnSubmit(pt1);
            adaptor.PatientAppointments.DeleteOnSubmit(ap1);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Amends a previous test result record with new information.
        /// </summary>
        /// <param name = "userId">The ID of the optician that performed the procedure.</param>
        /// <param name = "testId">The ID of the test result record to be amended.</param>
        /// <param name = "date">The date that the appointment took place.</param>
        /// <param name = "rSph">The spherical diops of the right eye.</param>
        /// <param name = "lSph">The spherical diops of the left eye.</param>
        /// <param name = "rVa1">The first column of the visual acuity for the right eye.</param>
        /// <param name = "rVa2">The first column of the visual acuity for the right eye.</param>
        /// <param name = "lVa1">The second column of the visual acuity for the left eye.</param>
        /// <param name = "lVa2">The second column of the visual acuity for the left eye</param>
        /// <param name = "rCyl">The cylindrical diops of the right eye.</param>
        /// <param name = "rAxis">The cylindrical axis (in degrees) of the right eye.</param>
        /// <param name = "lCyl">The cylindrical diops of the left eye.</param>
        /// <param name = "lAxis">The cylindrical axis (in degrees) of the left eye.</param>
        /// <param name = "remarks">Any remarks of the appointment.</param>
        public void AmendTestResults(int userId, int testId, DateTime date, string rSph, string lSph, string rVa1,
                                     string rVa2, string lVa1,
                                     string lVa2, string rCyl, string rAxis, string lCyl, string lAxis, string remarks)
        {
            PatientTestResults pt1 = GetTestResult(testId);
            pt1.UserID = userId;
            pt1.Date = date;
            pt1.RSpH = rSph;
            pt1.LSpH = lSph;
            pt1.RvA1 = rVa1;
            pt1.RvA2 = rVa2;
            pt1.LVA1 = lVa1;
            pt1.LVA2 = lVa2;
            pt1.RcYL = rCyl;
            pt1.RAxis = rAxis;
            pt1.LcYL = lCyl;
            pt1.LaxIs = lAxis;
            pt1.Remarks = remarks;

            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Removes the specified test result record from the database.
        /// </summary>
        /// <param name = "testId">The test ID of the test results record to be removed.</param>
        public void DeleteTestResult(int testId)
        {
            PatientTestResults pt1 = GetTestResult(testId);
            adaptor.PatientTestResults.DeleteOnSubmit(pt1);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Deletes specified appointment record from the database.
        /// </summary>
        /// <param name = "appointmentId">The appointment id of the appointment record to be removed.</param>
        public void DeleteAppointment(int appointmentId)
        {
            PatientAppointments pt1 = GetAppointmentById(appointmentId);
            adaptor.PatientAppointments.DeleteOnSubmit(pt1);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Amends an appointment record by replacing it with the given information.
        /// </summary>
        /// <param name = "appointmentId">The appointment ID to be amended.</param>
        /// <param name = "startTime">The new start time of the appointment.</param>
        /// <param name = "endTime">The new end time of the appointment.</param>
        /// <param name = "remarks">The new remarks of the appointment.</param>
        /// <param name = "userId">The new user id of the optician performing the procedure.</param>
        public void AmendAppointment(int appointmentId, DateTime startTime, DateTime endTime, string remarks, int userId)
        {
            PatientAppointments pt1 = GetAppointmentById(appointmentId);
            pt1.StartDateTime = startTime;
            pt1.EndDateTime = endTime;
            pt1.Remarks = remarks;
            pt1.UserID = userId;
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Fetches a test result record from the given test ID.
        /// </summary>
        /// <param name = "testId">The test id that a record lookup is performed on.</param>
        /// <returns>The test results record.</returns>
        public PatientTestResults GetTestResult(int testId)
        {
            return (from q in adaptor.PatientTestResults
                    where q.TestID == testId
                    select q).First();
        }

        /// <summary>
        ///   Fetches a list of appointments on a given patient
        /// </summary>
        /// <param name = "patientId">The patient id that a record lookup is performed on.</param>
        /// <returns>A list of appointments associated with the given patient.</returns>
        public IQueryable<PatientAppointments> GetAppointmentsOnPatient(int patientId)
        {
            return from q in adaptor.PatientAppointments
                   where q.PatientID == patientId
                   select q;
        }

        /// <summary>
        ///   Fetches a list of test results on a given patient
        /// </summary>
        /// <param name = "patientId">The patient id that a record lookup is performed on.</param>
        /// <returns>A list of test results associated with the given patient.</returns>
        public IQueryable<PatientTestResults> GetTestResults(int patientId)
        {
            return from q in adaptor.PatientTestResults
                   where q.PatientID == patientId
                   select q;
        }

        /// <summary>
        ///   Fetches a list of rest results associated with a given patient and formats them
        /// </summary>
        /// <param name = "patientId">The patient id that a record lookup is performed on.</param>
        /// <returns>A list of formatted strings containing the ID and dates of test results.</returns>
        public List<string> TestResults(int patientId)
        {
            List<string> sl1 = new List<string>();
            foreach (PatientTestResults pt1 in GetTestResults(patientId))
            {
                StringBuilder sb1 = new StringBuilder();
                sb1.Append("#");
                sb1.Append(pt1.TestID);
                sb1.Append(":");
                sb1.Append(pt1.Date.Value.ToShortDateString());
                sl1.Add(sb1.ToString());
            }
            return sl1;
        }

        /// <summary>
        ///   Removed the specified condition from the database using the condition ID
        /// </summary>
        /// <param name = "conditionId">The condition id of the condition to be deleted.</param>
        public void DeleteCondition(int conditionId)
        {
            Conditions query = (from q in adaptor.Conditions
                                where q.ConditionID == conditionId
                                select q).First();
            adaptor.PatientConditions.DeleteAllOnSubmit(query.PatientConditions);
            adaptor.Conditions.DeleteOnSubmit(query);
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Amends the specified condition by replacing the stored name in the database.
        /// </summary>
        /// <param name = "conditionId">The condition id to be amended.</param>
        /// <param name = "conditionName">The new name of the condition.</param>
        public void AmendCondition(int conditionId, string conditionName)
        {
            Conditions query = (from q in adaptor.Conditions
                                where q.ConditionID == conditionId
                                select q).First();
            query.Condition = conditionName;
            adaptor.SubmitChanges();
        }

        /// <summary>
        ///   Releases unmanaged and - optionally - managed resources
        /// </summary>
        /// <param name = "disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                // free managed resources
                adaptor.Dispose();
                connection.Dispose();
            }
            // free native resources if there are any.
        }
    }
}